# Licensed under the AGPLv3+ License: https://www.gnu.org/licenses/
# For details: https://github.com/msftcangoblowm/drain-swamp/blob/master/NOTICE.txt
name: Deploy Sphinx docs to gh pages

on:
  push:
    branches: [$default-branch]
    #tags:
    #  - '*.*.*'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

defaults:
  run:
    shell: bash

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#concurrency
concurrency:
  group: docs-${{ github.ref }}
  cancel-in-progress: false

env:
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  LOCK_SUFFIX: ${{ vars.DRAINSWAMP_SET_LOCK == '1' && '.lock' || '.unlock' }}

jobs:
  pages:
    name: "publish github pages"
    runs-on: "${{ matrix.platform }}"
    # If it doesn't finish in an hour, it's not going to. Don't spin for six
    # hours needlessly.
    timeout-minutes: 60
    strategy:
      matrix:
        platform:
          - ubuntu-latest
        python-version:
          - "3.9"
      fail-fast: false
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
    permissions:
      pages: write
      id-token: write

    steps:
    - name: platform set locale
      run: |
        sudo locale-gen en_US.UTF-8
        sudo update-locale

    - id: prepare-config-settings
      name: >-
        Build Plugin parameters
      uses: 'msftcangoblowm/drain-swamp-action@1.0.2'
      with:
        plugin_parameters: '{"set-lock": "${{ vars.DRAINSWAMP_SET_LOCK }}", "kind": "current"}'
        checkout: true
        python_version: "${{ matrix.python-version }}"

    - name: "Download artifact"
      uses: actions/download-artifact@v4.1.8
      with:
        name: config-settings-${{ matrix.platform || matrix.os }}-${{ matrix.python-version }}
        path: '${{ runner.temp }}'

    - name: Checkout the repo
      uses: actions/checkout@v4.2.0
      with:
        repository: '${{ github.repository }}'
        # fetch all branches and tags instead of only fetching the ref/SHA that triggered the workflow
        fetch-depth: 0

    # https://stackoverflow.com/questions/66349002/get-latest-tag-git-describe-tags-when-repo-is-cloned-with-depth-1
    # echo "tag=$(git describe --tags `git rev-list --tags --max-count=1`)" >> $GITHUB_OUTPUT
    - name: Get latest tag
      id: vars
      run: |
        echo "tag=$(git describe --tags)" >> $GITHUB_OUTPUT

    - name: "Install Python"
      uses: actions/setup-python@v5.2.0
      with:
        python-version: '${{ matrix.python-version }}' # default of sphinx-notes/pages
        # cache: pip
        # cache-dependency-path: |
        #  requirements/*${{ env.LOCK_SUFFIX }}
        #  docs/requirements${{ env.LOCK_SUFFIX }}

    - name: "Install dependencies for build"
      run: |
        python -m pip install -r requirements/kit.lock -r requirements/prod.shared.unlock

    # Create generated files: version file and .lnk files. sdist tarball ignored
    - name: "Build sdist to run plugins. Create generated files"
      run: |
        # TOML file location ${{ runner.temp }}/${{ steps.outcome.inputs.toml_file_name }}
        # env.DS_CONFIG_SETTINGS contains (OS independent) path to TOML file
        cat '${{ env.DS_CONFIG_SETTINGS }}'
        python -m build

    - name: deploy Sphinx --> Github pages
      id: deployment
      uses: sphinx-notes/pages@3.1  # MIT
      with:
        checkout: false
        requirements_path: docs/requirements${{ env.LOCK_SUFFIX }}
        documentation_path: docs  # explicit better than implicit
