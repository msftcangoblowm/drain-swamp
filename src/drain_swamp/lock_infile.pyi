import logging
from collections.abc import (
    Generator,
    Hashable,
    Sequence,
)
from dataclasses import (
    InitVar,
    dataclass,
)
from pathlib import Path
from typing import (
    Any,
    Final,
)

from .lock_datum import InFileType

__all__ = (
    "strip_inline_comments",
    "InFile",
    "InFiles",
)

_logger: Final[logging.Logger]
is_module_debug: Final[bool]

def strip_inline_comments(val: str) -> str: ...
@dataclass
class InFile(Hashable):
    relpath: str
    stem: str
    constraints: set[str] = ...
    requirements: set[str] = ...

    def abspath(self, path_package_base: Path) -> Path: ...
    @property
    def depth(self) -> int: ...
    def resolve(self, constraint: str, requirements: set[str]) -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, right: object) -> bool: ...
    def __lt__(self, right: object) -> bool: ...

@dataclass
class InFiles:
    cwd: Path
    in_files: InitVar[list[Path]]
    _files: set[InFile] = ...
    _zeroes: set[InFile] = ...

    def __post_init__(self, in_files: Sequence[Path]) -> None: ...
    @staticmethod
    def line_comment_or_blank(line: str) -> bool: ...
    @staticmethod
    def is_requirement_or_constraint(line: str) -> bool: ...
    @property
    def files(self) -> Generator[InFile, None, None]: ...
    @files.setter
    def files(self, val: Any) -> None: ...
    @property
    def zeroes(self) -> Generator[InFile, None, None]: ...
    @zeroes.setter
    def zeroes(self, val: Any) -> None: ...
    def in_generic(self, val: Any, set_name: InFileType | None = ...) -> bool: ...
    def in_zeroes(self, val: Any) -> bool: ...
    def __contains__(self, val: Any) -> bool: ...
    def get_by_relpath(
        self,
        relpath: str,
        set_name: InFileType | None = ...,
    ) -> InFile | None: ...
    def move_zeroes(self) -> None: ...
    def resolve_zeroes(self) -> None: ...
    def resolution_loop(self) -> None: ...
    def write(self) -> Generator[Path, None, None]: ...
