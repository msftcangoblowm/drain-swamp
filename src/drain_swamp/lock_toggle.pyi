import logging
from collections.abc import (
    Generator,
    Sequence,
)
from dataclasses import (
    InitVar,
    dataclass,
    field,
)
from pathlib import Path
from typing import (
    Any,
    Final,
)

from .backend_abc import BackendType

__all__ = (
    "lock_compile",
    "unlock_compile",
)

_logger: Final[logging.Logger]

def is_piptools() -> bool: ...
def lock_compile(inst: BackendType) -> Generator[Path, None, None]: ...
def strip_inline_comments(val: str) -> str: ...
@dataclass
class InFile:
    relpath: str
    stem: str
    constraints: set[str] = field(default_factory=set)
    requirements: set[str] = field(default_factory=set)

    @staticmethod
    def check_path(cwd: Path, path_to_check: Any) -> None: ...
    def abspath(self, path_package_base: Path) -> Path: ...
    @property
    def depth(self) -> int: ...
    def resolve(self, constraint: str, requirements: set[str]) -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, right: Any) -> bool: ...

@dataclass
class InFiles:
    cwd: Path
    in_files: InitVar[list[Path]]
    _files: set[InFile] = field(init=False, default_factory=set)
    _zeroes: set[InFile] = field(init=False, default_factory=set)

    def __post_init__(self, in_files: Sequence[Path]) -> None: ...
    @property
    def files(self) -> Generator[InFile, None, None]: ...
    @files.setter
    def files(self, val: Any) -> None: ...
    @property
    def zeroes(self) -> Generator[InFile, None, None]: ...
    @zeroes.setter
    def zeroes(self, val: Any) -> None: ...
    def in_generic(self, val: Any, set_name: str | None = "files") -> bool: ...
    def in_zeroes(self, val: Any) -> bool: ...
    def __contains__(self, val: Any) -> bool: ...
    def get_by_relpath(
        self,
        relpath: str,
        set_name: str | None = "files",
    ) -> InFile | None: ...
    def move_zeroes(self) -> None: ...
    def resolve_zeroes(self) -> None: ...
    def resolution_loop(self) -> None: ...
    def write(self) -> Generator[Path, None, None]: ...

def unlock_compile(inst: BackendType) -> Generator[Path, None, None]: ...
