Dynamic versioning
===================

pyproject.toml
---------------

.. code-block:: text

   [build-system]
   requires = ["setuptools>=69.0.2", "wheel", "build", "setuptools_scm>=8"]
   build-backend = "setuptools.build_meta"

   [project]
   # drain-swamp grabs package name from here
   name = "your-package-name"

   # See getting start --> Dependencies
   dynamic = [
       "optional-dependencies",
       "dependencies",
       "version",
   ]

   # drain-swamp sources first name from here
   authors = [  # Contact by mastodon please
       {name = "Dave Faulkmore", email = "faulkmore@protonmail.com"},
   ]

   [tool.setuptools.dynamic]
   version = {attr = "drain_swamp._version.__version__"}

   [tool.setuptools_scm]
   # can be empty if no extra settings are needed, presence enables setuptools_scm
   # SETUPTOOLS_SCM_PRETEND_VERSION_FOR_DRAIN_SWAMP="1.0.2" python -m setuptools_scm
   fallback_version = "1.0.2"
   version_file = "src/drain_swamp/_version.py"

Change ``drain_swamp`` to your package name (underscores, not hyphens)

Provide defaults
"""""""""""""""""

.. code-block:: text

   [tool.drain-swamp]
   copyright_start_year = 2024  # this is an int, not a str

Default value for copyright_start_year is 1970

setup.py
---------

Create the linkage between ``setuptools-scm`` and ``setuptools``.

.. code-block:: text

   from setuptools import setup
   from setuptools_scm.version import (
       get_local_node_and_date,
       guess_next_dev_version,
   )
   def _clean_version():
       return {
           "local_scheme": get_local_node_and_date,
           "version_scheme": guess_next_dev_version,
       }

   setup(
       use_scm_version=_clean_version,
   )

Figuring out how this ^^ code works is an ugly rabbit hole. Like dog
shiat, best not to step in it. Copy+paste into ``setup.py`` then brush teeth,
gargle, and try to forget. Don't thank me, just forget it ever happened.

Keep an eye on ``src/[package_name]/_version.py``.

:code:`drain-swamp build --kind="current"` would set to a development version.

:code:`drain-swamp build --kind="0.0.2"` would set to an explicit semantic version str.

Beyond ``[major].[minor].[micro]`` learn about when to be using
alpha/beta/pre/post/rc releases.

\_version.py
--------------

Here is an example ``_version.py`` file. Might need this, before the
first commit or tagged release

.. code-block:: text

   # file generated by setuptools_scm
   # don't change, don't track in version control
   TYPE_CHECKING = False
   if TYPE_CHECKING:
       from typing import Tuple, Union
       VERSION_TUPLE = Tuple[Union[int, str], ...]
   else:
       VERSION_TUPLE = object

   version: str
   __version__: str
   __version_tuple__: VERSION_TUPLE
   version_tuple: VERSION_TUPLE

   __version__ = version = '0.0.2'
   __version_tuple__ = version_tuple = (0, 0, 2)

Always automatically generated, so don't bother fixing the state typing

static typing
--------------

Here is ``_version.pyi`` so don't duplicate efforts.

.. code-block:: text

   from typing import Final

   version: Final[str]
   __version__: Final[str]
   __version_tuple__: Final[tuple[int | str, ...]]
   version_tuple: Final[tuple[int | str, ...]]
